[user]
    name = Vidur Murali
    email = vidur.murali@gmail.com
[http]
    sslverify = false
[credential]
    helper = osxkeychain
[alias]
#   Human Aliases
    branches = branch -a
    tags = tag -n99
    stashes = stash list
    diffc = diff --cached
    diffm = diff --cached --diff-filter=M
    unfuckit = reset HEAD --hard
    rekt = reset HEAD --hard
    ls = ls-files
    untrack = branch --unset-upstream

#   Always prune when you fetch
    fetch = fetch -p

#   Better logs
    l = log --date=local --format='format:%C(yellow)commit %H [%h]%Creset%nAuthor: %Cblue%an%Creset <%ae>%nDate:   %cd, %Cgreen%cr%Creset%n%n    %s%n%n%w(0,4,4)%b'
    dag = log --graph --format='format:%C(yellow)%h%C(reset) %C(blue)\"%an\" <%ae>%C(reset) %C(magenta)%cr%C(reset)%C(auto)%d%C(reset)%n%s' --date-order

#   Fast-forward merge the current branch with the remote branch of the same name
    ff = "!f() { br=`git branch --no-color | grep \"^\\*\" | cut -d' ' -f2`; git merge --ff-only origin/$br; }; f"

#   $1 => the number of commits to diff across
    last = "!f() { n=$1; if [ -z "$1" ] ; then n=1; fi; git diff HEAD~$n HEAD; }; f"

#   git prev
#   --------
#   See the diff between a particular commit and the one(s) before it
#
#   Args: $1 => commit ID to diff to ; $2 => number of commits to diff across
#
#   Example:
#       > git prev ae85bc9
#       => Shows `git diff ae85bc9~1 ae85bc9
#
#       > git prev ae85bc9 5
#       => Shows `git diff ae85bc9~5 ae85bc9
#
    prev = "!f() { n=$2; if [ -z "$2" ] ; then n=1; fi; git diff $1~$n $1; }; f"

#   git track
#   ---------
#   Set upstream branches with fewer keystrokes
#
#   Examples:
#       On branch 'feature':
#       > git track
#       => 'feature' now tracks 'origin/feature'
#
#       > git track bananas
#       => 'feature' now tracks 'origin/bananas'
#
#       > git track gitlab bananas
#       => 'feature' now tracks 'gitlab/bananas'
#
    track = "!f() { remote=$1; branch=$2; git branch --set-upstream-to=$remote/$branch; }; f"

    branchdate = !git for-each-ref --sort='-authordate' --format='%(refname)%<2>%(authordate)' refs/heads | sed -e 's-refs/heads/--'
#   git rm deleted files in repo
    rmm = "!f() { git status | grep deleted | awk '{print $2;}' | xargs git rm; }; f"

# Logic:
#
# The 'git stash save' fails if the tree is clean (instead of
# creating an empty stash :P). So, we only 'stash' and 'pop' if
# the tree is dirty.
#
# The 'git rebase --whitespace=fix HEAD~' throws away the commit
# if it's empty, and adding '--keep-empty' prevents the whitespace
# from being fixed. So, we first check that the index is dirty.
#
# Also:
# - '(! git diff-index --quiet --cached HEAD)' is true (zero) if
#   the index is dirty
# - '(! git diff-files --quiet .)' is true if the tree is dirty
#
# The 'rebase --whitespace=fix' trick is from here:
# http://stackoverflow.com/a/19156679/470844
    fixws = !"\
        if (! git diff-files --quiet .) && \
        (! git diff-index --quiet --cached HEAD) ; then \
        git commit -m FIXWS_SAVE_INDEX && \
        git stash save FIXWS_SAVE_TREE && \
        git rebase --whitespace=fix HEAD~ && \
        git stash pop && \
        git reset --soft HEAD~ ; \
        elif (! git diff-index --quiet --cached HEAD) ; then \
        git commit -m FIXWS_SAVE_INDEX && \
        git rebase --whitespace=fix HEAD~ && \
        git reset --soft HEAD~ ; \
    fi"
	ap = add --patch
	d = diff
	f = fetch -p
[color]
    ui = true
    diff = true
    status = true
    branch = true
[color "diff"]
    plain = normal
    meta = yellow
    frag = blue
    old = red
    new = green
    commit = yellow
    whitespace = red reverse
[color "status"]
    header = normal
    added = green
    updated = green
    changed = blue
    untracked = red
    branch = blue
    nobranch = red
[color "branch"]
    plain = normal
    current = blue
    local = green
    remote = red
[filter "media"]
	clean = git media clean %f
	smudge = git media smudge %f
	required = true
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[core]
	editor = nano
	pager = less -x1,5
[push]
	followTags = true
	default = upstream
